name: Build and Release JAR

on:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Detect build system
      id: detect-build
      run: |
        if [ -f "pom.xml" ]; then
          echo "BUILD_SYSTEM=maven" >> $GITHUB_OUTPUT
          echo "BUILD_CMD=mvn clean package -DskipTests" >> $GITHUB_OUTPUT
          echo "JAR_PATH=target/*.jar" >> $GITHUB_OUTPUT
          echo "Found Maven project"
        elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
          echo "BUILD_SYSTEM=gradle" >> $GITHUB_OUTPUT
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            echo "BUILD_CMD=./gradlew clean build -x test" >> $GITHUB_OUTPUT
          else
            echo "BUILD_CMD=gradle clean build -x test" >> $GITHUB_OUTPUT
          fi
          echo "JAR_PATH=build/libs/*.jar" >> $GITHUB_OUTPUT
          echo "Found Gradle project"
        else
          echo "No build system detected. Creating manual build..."
          echo "BUILD_SYSTEM=manual" >> $GITHUB_OUTPUT
        fi

    - name: Build project
      if: steps.detect-build.outputs.BUILD_SYSTEM != 'manual'
      run: ${{ steps.detect-build.outputs.BUILD_CMD }}

    - name: Manual build (if no build system)
      if: steps.detect-build.outputs.BUILD_SYSTEM == 'manual'
      run: |
        echo "Manual build - compiling Java files directly"
        mkdir -p target/classes
        find . -name "*.java" > sources.txt
        javac -d target/classes @sources.txt
        jar cf target/manual-app.jar -C target/classes .

    - name: Find JAR file
      id: find-jar
      run: |
        if [ "${{ steps.detect-build.outputs.BUILD_SYSTEM }}" = "maven" ]; then
          JAR_PATH=$(find . -name "*.jar" -path "*/target/*" ! -name "*-sources.jar" ! -name "*-javadoc.jar" | head -1)
        elif [ "${{ steps.detect-build.outputs.BUILD_SYSTEM }}" = "gradle" ]; then
          JAR_PATH=$(find . -name "*.jar" -path "*/build/libs/*" ! -name "*-plain.jar" ! -name "*-sources.jar" ! -name "*-javadoc.jar" | head -1)
        else
          JAR_PATH=$(find . -name "*.jar" -path "*/target/*" | head -1)
        fi
        
        if [ -z "$JAR_PATH" ]; then
          echo "No JAR file found"
          echo "Searching for any JAR files..."
          find . -name "*.jar" || echo "No JAR files found at all"
          exit 1
        fi
        echo "JAR_PATH=$JAR_PATH" >> $GITHUB_OUTPUT
        echo "JAR_NAME=$(basename $JAR_PATH)" >> $GITHUB_OUTPUT
        echo "Found JAR: $JAR_PATH"

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: ${{ steps.find-jar.outputs.JAR_PATH }}
        retention-days: 1

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      with:
        files: ${{ steps.find-jar.outputs.JAR_PATH }}
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Automated release from GitHub Actions
          JAR: ${{ steps.find-jar.outputs.JAR_NAME }}
